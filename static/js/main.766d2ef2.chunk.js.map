{"version":3,"sources":["components/Card.tsx","API_DATA/CardData.js","components/Loader.tsx","pages/RootDir.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Card","props","data","title","slogan","flavor","portionSize","portionSizeText","miceSize","miceSizeText","portionWeight","portionUnit","cardClass","bottomTextDisabled","bottomTextSelected","id","handleSelect","className","onClick","onDoubleClick","Loader","RootDir","useState","setData","useEffect","setTimeout","CardData","map","card","i","mode","prev","console","log","length","key","App","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.766d2ef2.chunk.js","sourcesContent":["import React from 'react'\r\nimport './Card.scss'\r\nimport { CardType } from '../types/types'\r\n\r\ninterface Props {\r\n\tdata: CardType\r\n\thandleSelect(id: number | undefined, mode: 'select' | 'deselect'): void\r\n}\r\n\r\nconst Card: React.FC<Props> = props => {\r\n\tlet {\r\n\t\tdata: {\r\n\t\t\ttitle,\r\n\t\t\tslogan,\r\n\t\t\tflavor,\r\n\t\t\tportionSize,\r\n\t\t\tportionSizeText,\r\n\t\t\tmiceSize,\r\n\t\t\tmiceSizeText,\r\n\t\t\tportionWeight,\r\n\t\t\tportionUnit,\r\n\t\t\tcardClass,\r\n\t\t\tbottomTextDisabled,\r\n\t\t\tbottomTextSelected,\r\n\t\t\tid,\r\n\t\t},\r\n\t\thandleSelect,\r\n\t} = props\r\n\r\n\treturn (\r\n\t\t<div className='card__container'>\r\n\t\t\t<div\r\n\t\t\t\tonClick={() => handleSelect(id, 'select')}\r\n\t\t\t\tonDoubleClick={() => handleSelect(id, 'deselect')}\r\n\t\t\t\tclassName={`card ${cardClass}`}>\r\n\t\t\t\t<p className='card__slogan'>{slogan}</p>\r\n\t\t\t\t<h3 className='card__title'>{title}</h3>\r\n\t\t\t\t<p className='card__flavor'>{flavor}</p>\r\n\t\t\t\t<p className='card__bodyText'>\r\n\t\t\t\t\t<span className='bodyText__portionSize'>{portionSize || ''}</span>\r\n\t\t\t\t\t&nbsp;\r\n\t\t\t\t\t<span className='bodyText__portionSizeText'>{portionSizeText}</span>\r\n\t\t\t\t\t&nbsp;\r\n\t\t\t\t\t<span className='bodyText__miceSize'>{miceSize || ''}</span>\r\n\t\t\t\t\t&nbsp;\r\n\t\t\t\t\t<span className='bodyText__miceSizeText'>{miceSizeText}</span>\r\n\t\t\t\t\t&nbsp;\r\n\t\t\t\t</p>\r\n\t\t\t\t<div className='card__portion'>\r\n\t\t\t\t\t<p className='portion__weight'>{portionWeight}</p>\r\n\t\t\t\t\t<p className='portion__unit'>{portionUnit}</p>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t\t{cardClass === 'card--default' ? (\r\n\t\t\t\t<p className='bottom__text'>\r\n\t\t\t\t\tЧего сидишь? Порадуй котэ, &nbsp;\r\n\t\t\t\t\t<span\r\n\t\t\t\t\t\tonClick={() => handleSelect(id, 'select')}\r\n\t\t\t\t\t\tclassName='text__link'>\r\n\t\t\t\t\t\tкупи\r\n\t\t\t\t\t</span>\r\n\t\t\t\t\t<span className='text__period'>.</span>\r\n\t\t\t\t</p>\r\n\t\t\t) : cardClass === 'card--selected' ? (\r\n\t\t\t\t<p className='bottom__text'>{bottomTextSelected}</p>\r\n\t\t\t) : (\r\n\t\t\t\t<p className='bottom__text'>{bottomTextDisabled}</p>\r\n\t\t\t)}\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default Card\r\n","// ? Данные можно было уплотнить еще дальше, но я решил оставить так\r\n// ? Также возможно сделать 1 текст\r\nexport default [\r\n  {\r\n    title: \"Нямушка\",\r\n    slogan: \"Сказочное заморское яство\",\r\n    flavor: \"с фуа-гра\",\r\n    portionSize: 10,\r\n    portionSizeText: \"порций\",\r\n    miceSize: 0,\r\n    miceSizeText: \"мышь в подарок\",\r\n    portionWeight: \"0,5\",\r\n    portionUnit: \"КГ\",\r\n    bottomTextSelected: \"Печень утки разварная с артишоками.\",\r\n    bottomTextDisabled: \"Печалька, с фуа-гра закончился\",\r\n  },\r\n  {\r\n    title: \"Нямушка\",\r\n    slogan: \"Сказочное заморское яство\",\r\n    flavor: \"с рыбой\",\r\n    portionSize: 40,\r\n    portionSizeText: \"порций\",\r\n    miceSize: 2,\r\n    miceSizeText: \"мыши в подарок\",\r\n    portionWeight: \"2\",\r\n    portionUnit: \"КГ\",\r\n    bottomTextSelected: \"Головы щучьи с чесноком да свежайшая сёмгушка.\",\r\n    bottomTextDisabled: \"Печалька, с рыбой закончился.\",\r\n  },\r\n  {\r\n    title: \"Нямушка\",\r\n    slogan: \"Сказочное заморское яство\",\r\n    flavor: \"с курой\",\r\n    portionSize: 100,\r\n    portionSizeText: \"порций\",\r\n    miceSize: 5,\r\n    miceSizeText: \"мышей в подарок заказчик доволен\",\r\n    portionWeight: \"5\",\r\n    portionUnit: \"КГ\",\r\n    bottomTextSelected: \"Филе из цыплят с трюфелями в бульоне.\",\r\n    bottomTextDisabled: \"Печалька, с курой закончился.\",\r\n  },\r\n]\r\n","import React from \"react\"\r\nimport \"./Loader.scss\"\r\n\r\nconst Loader: React.FC = () => (\r\n  <div className=\"lds-ripple\">\r\n    <div></div>\r\n    <div></div>\r\n  </div>\r\n)\r\n\r\nexport default Loader\r\n","import React, { useState, useEffect, useRef } from \"react\"\r\nimport \"./RootDir.scss\"\r\nimport Card from \"../components/Card\"\r\nimport CardData from \"../API_DATA/CardData\"\r\nimport { CardType } from \"../types/types\"\r\nimport Loader from \"../components/Loader\"\r\n\r\nconst RootDir: React.FC = () => {\r\n  const [data, setData] = useState<CardType[]>([])\r\n\r\n  useEffect(() => {\r\n    // * API-call imitation\r\n    setTimeout(\r\n      () =>\r\n        setData(\r\n          CardData.map((card, i) => ({\r\n            ...card,\r\n            cardClass: \"card--default\",\r\n            id: i,\r\n          }))\r\n        ),\r\n      2000\r\n    )\r\n  }, [])\r\n\r\n  const handleSelect = (id: number, mode: \"select\" | \"deselect\"): void => {\r\n    setData((prev) =>\r\n      prev.map((card) => {\r\n        if (card.id === id) {\r\n          console.log(card)\r\n          if (card.cardClass === \"card--default\" && mode === \"select\") {\r\n            card.cardClass = \"card--selected\"\r\n          } else if (\r\n            card.cardClass === \"card--selected\" &&\r\n            mode === \"deselect\"\r\n          ) {\r\n            card.cardClass = \"card--default\"\r\n          }\r\n        }\r\n        return card\r\n      })\r\n    )\r\n  }\r\n\r\n  return (\r\n    <main className=\"RootDir RootDir--container\">\r\n      <h2 className=\"RootDir__header\">Ты сегодня покормил кота?</h2>\r\n      <div className=\"container\">\r\n        {data.length ? (\r\n          data.map((card) => (\r\n            <Card\r\n              handleSelect={handleSelect}\r\n              data={card}\r\n              key={card.id + card.flavor}\r\n            />\r\n          ))\r\n        ) : (\r\n          <Loader />\r\n        )}\r\n      </div>\r\n    </main>\r\n  )\r\n}\r\n\r\nexport default RootDir\r\n","import React from \"react\"\nimport { Switch, Route, BrowserRouter } from \"react-router-dom\"\nimport RootDir from \"./pages/RootDir\"\nimport \"./App.scss\"\n\nconst App: React.FC = () => {\n  return (\n    <BrowserRouter>\n      <div className=\"App\">\n        <Switch>\n          <Route path=\"/\" component={RootDir} />\n        </Switch>\n      </div>\n    </BrowserRouter>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport \"./index.css\"\nimport App from \"./App\"\nimport * as serviceWorker from \"./serviceWorker\"\n\nReactDOM.render(<App />, document.getElementById(\"root\"))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}